// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/13/2017 16:13:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Cwiczenie5_3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Cwiczenie5_3_vlg_sample_tst(
	clk,
	in1,
	in2,
	sampler_tx
);
input  clk;
input [0:7] in1;
input [0:7] in2;
output sampler_tx;

reg sample;
time current_time;
always @(clk or in1 or in2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Cwiczenie5_3_vlg_check_tst (
	out0,
	overf,
	sampler_rx
);
input [0:7] out0;
input  overf;
input sampler_rx;

reg [0:7] out0_expected;
reg  overf_expected;

reg [0:7] out0_prev;
reg  overf_prev;

reg [0:7] out0_expected_prev;
reg  overf_expected_prev;

reg [0:7] last_out0_exp;
reg  last_overf_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	out0_prev = out0;
	overf_prev = overf;
end

// update expected /o prevs

always @(trigger)
begin
	out0_expected_prev = out0_expected;
	overf_expected_prev = overf_expected;
end


// expected out0[ 7 ]
initial
begin
	out0_expected[7] = 1'bX;
end 
// expected out0[ 6 ]
initial
begin
	out0_expected[6] = 1'bX;
end 
// expected out0[ 5 ]
initial
begin
	out0_expected[5] = 1'bX;
end 
// expected out0[ 4 ]
initial
begin
	out0_expected[4] = 1'bX;
end 
// expected out0[ 3 ]
initial
begin
	out0_expected[3] = 1'bX;
end 
// expected out0[ 2 ]
initial
begin
	out0_expected[2] = 1'bX;
end 
// expected out0[ 1 ]
initial
begin
	out0_expected[1] = 1'bX;
end 
// expected out0[ 0 ]
initial
begin
	out0_expected[0] = 1'bX;
end 

// expected overf
initial
begin
	overf_expected = 1'bX;
end 
// generate trigger
always @(out0_expected or out0 or overf_expected or overf)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected out0 = %b | expected overf = %b | ",out0_expected_prev,overf_expected_prev);
	$display("| real out0 = %b | real overf = %b | ",out0_prev,overf_prev);
`endif
	if (
		( out0_expected_prev[0] !== 1'bx ) && ( out0_prev[0] !== out0_expected_prev[0] )
		&& ((out0_expected_prev[0] !== last_out0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0_exp[0] = out0_expected_prev[0];
	end
	if (
		( out0_expected_prev[1] !== 1'bx ) && ( out0_prev[1] !== out0_expected_prev[1] )
		&& ((out0_expected_prev[1] !== last_out0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0_exp[1] = out0_expected_prev[1];
	end
	if (
		( out0_expected_prev[2] !== 1'bx ) && ( out0_prev[2] !== out0_expected_prev[2] )
		&& ((out0_expected_prev[2] !== last_out0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0_exp[2] = out0_expected_prev[2];
	end
	if (
		( out0_expected_prev[3] !== 1'bx ) && ( out0_prev[3] !== out0_expected_prev[3] )
		&& ((out0_expected_prev[3] !== last_out0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0_exp[3] = out0_expected_prev[3];
	end
	if (
		( out0_expected_prev[4] !== 1'bx ) && ( out0_prev[4] !== out0_expected_prev[4] )
		&& ((out0_expected_prev[4] !== last_out0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0_exp[4] = out0_expected_prev[4];
	end
	if (
		( out0_expected_prev[5] !== 1'bx ) && ( out0_prev[5] !== out0_expected_prev[5] )
		&& ((out0_expected_prev[5] !== last_out0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0_exp[5] = out0_expected_prev[5];
	end
	if (
		( out0_expected_prev[6] !== 1'bx ) && ( out0_prev[6] !== out0_expected_prev[6] )
		&& ((out0_expected_prev[6] !== last_out0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0_exp[6] = out0_expected_prev[6];
	end
	if (
		( out0_expected_prev[7] !== 1'bx ) && ( out0_prev[7] !== out0_expected_prev[7] )
		&& ((out0_expected_prev[7] !== last_out0_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0_exp[7] = out0_expected_prev[7];
	end
	if (
		( overf_expected_prev !== 1'bx ) && ( overf_prev !== overf_expected_prev )
		&& ((overf_expected_prev !== last_overf_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port overf :: @time = %t",  $realtime);
		$display ("     Expected value = %b", overf_expected_prev);
		$display ("     Real value = %b", overf_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_overf_exp = overf_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Cwiczenie5_3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [0:7] in1;
reg [0:7] in2;
// wires                                               
wire [0:7] out0;
wire overf;

wire sampler;                             

// assign statements (if any)                          
Cwiczenie5_3 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.in1(in1),
	.in2(in2),
	.out0(out0),
	.overf(overf)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// in1[ 7 ]
initial
begin
	in1[7] = 1'b0;
	in1[7] = #180000 1'b1;
	in1[7] = #20000 1'b0;
end 
// in1[ 6 ]
initial
begin
	in1[6] = 1'b0;
	in1[6] = #240000 1'b1;
	in1[6] = #50000 1'b0;
end 
// in1[ 5 ]
initial
begin
	in1[5] = 1'b0;
	in1[5] = #160000 1'b1;
	in1[5] = #40000 1'b0;
end 
// in1[ 4 ]
initial
begin
	in1[4] = 1'b0;
	in1[4] = #160000 1'b1;
	in1[4] = #40000 1'b0;
end 
// in1[ 3 ]
initial
begin
	in1[3] = 1'b0;
end 
// in1[ 2 ]
initial
begin
	in1[2] = 1'b1;
	in1[2] = #60000 1'b0;
	in1[2] = #30000 1'b1;
end 
// in1[ 1 ]
initial
begin
	in1[1] = 1'b0;
	in1[1] = #110000 1'b1;
	in1[1] = #70000 1'b0;
end 
// in1[ 0 ]
initial
begin
	in1[0] = 1'b0;
	in1[0] = #110000 1'b1;
	in1[0] = #70000 1'b0;
end 
// in2[ 7 ]
initial
begin
	in2[7] = 1'b0;
	in2[7] = #220000 1'b1;
	in2[7] = #190000 1'b0;
end 
// in2[ 6 ]
initial
begin
	in2[6] = 1'b0;
	in2[6] = #140000 1'b1;
	in2[6] = #120000 1'b0;
end 
// in2[ 5 ]
initial
begin
	in2[5] = 1'b0;
	in2[5] = #80000 1'b1;
	in2[5] = #80000 1'b0;
end 
// in2[ 4 ]
initial
begin
	in2[4] = 1'b0;
	in2[4] = #40000 1'b1;
	in2[4] = #60000 1'b0;
end 
// in2[ 3 ]
initial
begin
	in2[3] = 1'b0;
	in2[3] = #20000 1'b1;
	in2[3] = #50000 1'b0;
end 
// in2[ 2 ]
initial
begin
	in2[2] = 1'b1;
	in2[2] = #50000 1'b0;
end 
// in2[ 1 ]
initial
begin
	in2[1] = 1'b1;
end 
// in2[ 0 ]
initial
begin
	in2[0] = 1'b0;
end 

Cwiczenie5_3_vlg_sample_tst tb_sample (
	.clk(clk),
	.in1(in1),
	.in2(in2),
	.sampler_tx(sampler)
);

Cwiczenie5_3_vlg_check_tst tb_out(
	.out0(out0),
	.overf(overf),
	.sampler_rx(sampler)
);
endmodule

