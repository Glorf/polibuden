// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/14/2017 14:16:36"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Cwiczenie3_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Cwiczenie3_1_vlg_sample_tst(
	iSW,
	sampler_tx
);
input [1:0] iSW;
output sampler_tx;

reg sample;
time current_time;
always @(iSW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Cwiczenie3_1_vlg_check_tst (
	oLEDG,
	sampler_rx
);
input [7:0] oLEDG;
input sampler_rx;

reg [7:0] oLEDG_expected;

reg [7:0] oLEDG_prev;

reg [7:0] oLEDG_expected_prev;

reg [7:0] last_oLEDG_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	oLEDG_prev = oLEDG;
end

// update expected /o prevs

always @(trigger)
begin
	oLEDG_expected_prev = oLEDG_expected;
end



// expected oLEDG[7]
initial
begin
	oLEDG_expected[7] = 1'bX;
	oLEDG_expected[7] = #999000 1'b0;
end 

// expected oLEDG[6]
initial
begin
	oLEDG_expected[6] = 1'bX;
	oLEDG_expected[6] = #999000 1'b0;
end 

// expected oLEDG[5]
initial
begin
	oLEDG_expected[5] = 1'bX;
	oLEDG_expected[5] = #999000 1'b0;
end 

// expected oLEDG[4]
initial
begin
	oLEDG_expected[4] = 1'bX;
	oLEDG_expected[4] = #999000 1'b0;
end 

// expected oLEDG[3]
initial
begin
	oLEDG_expected[3] = 1'bX;
	oLEDG_expected[3] = #999000 1'b0;
end 

// expected oLEDG[2]
initial
begin
	oLEDG_expected[2] = 1'bX;
	oLEDG_expected[2] = #999000 1'b0;
end 

// expected oLEDG[1]
initial
begin
	oLEDG_expected[1] = 1'bX;
	oLEDG_expected[1] = #999000 1'b0;
end 

// expected oLEDG[0]
initial
begin
	oLEDG_expected[0] = 1'bX;
	oLEDG_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(oLEDG_expected or oLEDG)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected oLEDG = %b | ",oLEDG_expected_prev);
	$display("| real oLEDG = %b | ",oLEDG_prev);
`endif
	if (
		( oLEDG_expected_prev[0] !== 1'bx ) && ( oLEDG_prev[0] !== oLEDG_expected_prev[0] )
		&& ((oLEDG_expected_prev[0] !== last_oLEDG_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDG[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDG_expected_prev);
		$display ("     Real value = %b", oLEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDG_exp[0] = oLEDG_expected_prev[0];
	end
	if (
		( oLEDG_expected_prev[1] !== 1'bx ) && ( oLEDG_prev[1] !== oLEDG_expected_prev[1] )
		&& ((oLEDG_expected_prev[1] !== last_oLEDG_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDG[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDG_expected_prev);
		$display ("     Real value = %b", oLEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDG_exp[1] = oLEDG_expected_prev[1];
	end
	if (
		( oLEDG_expected_prev[2] !== 1'bx ) && ( oLEDG_prev[2] !== oLEDG_expected_prev[2] )
		&& ((oLEDG_expected_prev[2] !== last_oLEDG_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDG[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDG_expected_prev);
		$display ("     Real value = %b", oLEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDG_exp[2] = oLEDG_expected_prev[2];
	end
	if (
		( oLEDG_expected_prev[3] !== 1'bx ) && ( oLEDG_prev[3] !== oLEDG_expected_prev[3] )
		&& ((oLEDG_expected_prev[3] !== last_oLEDG_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDG[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDG_expected_prev);
		$display ("     Real value = %b", oLEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDG_exp[3] = oLEDG_expected_prev[3];
	end
	if (
		( oLEDG_expected_prev[4] !== 1'bx ) && ( oLEDG_prev[4] !== oLEDG_expected_prev[4] )
		&& ((oLEDG_expected_prev[4] !== last_oLEDG_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDG[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDG_expected_prev);
		$display ("     Real value = %b", oLEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDG_exp[4] = oLEDG_expected_prev[4];
	end
	if (
		( oLEDG_expected_prev[5] !== 1'bx ) && ( oLEDG_prev[5] !== oLEDG_expected_prev[5] )
		&& ((oLEDG_expected_prev[5] !== last_oLEDG_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDG[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDG_expected_prev);
		$display ("     Real value = %b", oLEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDG_exp[5] = oLEDG_expected_prev[5];
	end
	if (
		( oLEDG_expected_prev[6] !== 1'bx ) && ( oLEDG_prev[6] !== oLEDG_expected_prev[6] )
		&& ((oLEDG_expected_prev[6] !== last_oLEDG_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDG[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDG_expected_prev);
		$display ("     Real value = %b", oLEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDG_exp[6] = oLEDG_expected_prev[6];
	end
	if (
		( oLEDG_expected_prev[7] !== 1'bx ) && ( oLEDG_prev[7] !== oLEDG_expected_prev[7] )
		&& ((oLEDG_expected_prev[7] !== last_oLEDG_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDG[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDG_expected_prev);
		$display ("     Real value = %b", oLEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDG_exp[7] = oLEDG_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Cwiczenie3_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] iSW;
// wires                                               
wire [7:0] oLEDG;

wire sampler;                             

// assign statements (if any)                          
Cwiczenie3_1 i1 (
// port map - connection between master ports and signals/registers   
	.iSW(iSW),
	.oLEDG(oLEDG)
);

// iSW[0]
always
begin
	iSW[0] = 1'b0;
	iSW[0] = #2500 1'b1;
	#2500;
end 

// iSW[1]
initial
begin
	iSW[1] = 1'b1;
	iSW[1] = #10000 1'b0;
end 

Cwiczenie3_1_vlg_sample_tst tb_sample (
	.iSW(iSW),
	.sampler_tx(sampler)
);

Cwiczenie3_1_vlg_check_tst tb_out(
	.oLEDG(oLEDG),
	.sampler_rx(sampler)
);
endmodule

